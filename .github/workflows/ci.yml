name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:

jobs:
  test:
    name: Test

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9']
    
    continue-on-error: true

    env:
      POETRY_VIRTUALENVS_CREATE: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Test
      run: poetry run pytest

  build:
    name: Build wheels
    
    needs: [test]

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Patch version number
      run: |
        import regex as re
        # settings
        tag = '${{ github.ref }}'[10:]
        path = './pyproject.toml'
        # get version string from tag
        pattern = 'v(\d+)(?:\.(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?$'
        match = re.match(pattern, tag)
        if match is None:
            raise RuntimeError('Invalid version tag')
        version = '.'.join(filter(lambda x: x is not None, match.groups()))
        # patch
        with open(path, 'r') as file:
            data = file.read()
        data = data.replace('version = "4.0.0-dev"', f'version = "{version}"')
        with open(path, 'w') as file:
            file.write(data)
      shell: python

    - name: Build
      run: poetry build

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.*

  publish:
    name: Upload if release

    needs: [build]

    runs-on: ubuntu-latest
    
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - name: Build
      run: poetry publish -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }}
