import pytest
import nfem
import numpy as np
from numpy.testing import assert_almost_equal


@pytest.fixture
def model():
    model = nfem.Model()

    model.add_node(id='A', x=0, y=0, z=0, support='xyz')
    model.add_node(id='B', x=2, y=0, z=0, support='xyz')
    model.add_node(id='C', x=1, y=0.5, z=3, fz=-1)
    model.add_node(id='D', x=0, y=1, z=0, support='xyz')
    model.add_node(id='E', x=2, y=1, z=0, support='xyz')

    model.add_truss(id='1', node_a='A', node_b='C', youngs_modulus=1, area=1)
    model.add_truss(id='2', node_a='B', node_b='C', youngs_modulus=1, area=1)
    model.add_truss(id='3', node_a='D', node_b='C', youngs_modulus=1, area=1)
    model.add_truss(id='4', node_a='E', node_b='C', youngs_modulus=1, area=1)

    return model


def test_example(model):
    model = model.get_duplicate()
    model.predict_tangential(strategy='lambda', value=0.05)
    model.perform_non_linear_solution_step(strategy='load-control')

    model = nfem.bracketing(model)

    model = model.get_duplicate()
    model.predict_tangential(strategy='arc-length')
    model.combine_prediction_with_eigenvector(beta=1.0)

    desired_delta_v = 0.2
    current_delta_v = model.get_dof_increment(dof=('C', 'v'))
    model.scale_prediction(desired_delta_v / current_delta_v)

    model.perform_non_linear_solution_step(strategy='arc-length-control')

    for step in range(30):
        model = model.get_duplicate()
        model.predict_tangential(strategy='arc-length')
        model.perform_non_linear_solution_step(strategy='arc-length-control')

    assert_almost_equal(model.load_displacement_curve(('C', 'u')).T, [
        [0, 0.0],
        [0.0, 0.05],
        [0.0, 0.07457572868389645],
        [0.0, 0.08675183196942748],
        [0.0, 0.0882666736698646],
        [0.0, 0.08864538409497387],
        [0.0, 0.0888347393075285],
        [0.0, 0.08884065665792083],
        [0.0, 0.08863404473373751],
        [0.0, 0.08800790457126546],
        [0.0, 0.08696762488174754],
        [0.0, 0.08551811683135219],
        [0.0, 0.08366622461985325],
        [0.0, 0.08142069068369907],
        [0.0, 0.07879211321394712],
        [0.0, 0.07579289480246111],
        [0.0, 0.07243718248075155],
        [0.0, 0.06874079950491684],
        [0.0, 0.06472116928087278],
        [0.0, 0.06039723185862731],
        [0.0, 0.0557893534545017],
        [0.0, 0.05091922948575346],
        [0.0, 0.045809781623022044],
        [0.0, 0.04048504938262185],
        [0.0, 0.03497007679333613],
        [0.0, 0.029290794681476277],
        [0.0, 0.023473899124125737],
        [0.0, 0.017546726624241563],
        [0.0, 0.011537126563224144],
        [0.0, 0.005473331487229221],
        [0.0, -0.0006161742166145208],
        [0.0, -0.006702786698380898],
        [0.0, -0.01275791552269669],
        [0.0, -0.01875311649032628],
        [0.0, -0.02466022384901572],
        [0.0, -0.030451481338284896],
        [0.0, -0.03609967151235392],
        [0.0, -0.04157824278496642],
        [0.0, -0.04686143363987942],
    ])

    assert_almost_equal(model.load_displacement_curve(('C', 'v')).T, [
        [0.0, 0.0],
        [0.0, 0.05],
        [0.0, 0.07457572868389645],
        [0.0, 0.08675183196942748],
        [0.0, 0.0882666736698646],
        [0.0, 0.08864538409497387],
        [0.0, 0.0888347393075285],
        [0.0, 0.08884065665792083],
        [0.19988231346594854, 0.08863404473373751],
        [0.39882310738124727, 0.08800790457126546],
        [0.5958854479830531, 0.08696762488174754],
        [0.7901412750931123, 0.08551811683135219],
        [0.9806758840152738, 0.08366622461985325],
        [1.1665922696331612, 0.08142069068369907],
        [1.3470153787864063, 0.07879211321394712],
        [1.521096249653331, 0.07579289480246111],
        [1.6880160176962868, 0.07243718248075155],
        [1.8469897688006096, 0.06874079950491684],
        [1.9972702214324487, 0.06472116928087278],
        [2.138151220922604, 0.06039723185862731],
        [2.2689710303258512, 0.0557893534545017],
        [2.389115403682289, 0.05091922948575346],
        [2.498020428894784, 0.045809781623022044],
        [2.5951751288130995, 0.04048504938262185],
        [2.6801238104620597, 0.03497007679333613],
        [2.752468153653544, 0.029290794681476277],
        [2.8118690314693104, 0.023473899124125737],
        [2.8580480562873354, 0.017546726624241563],
        [2.890788846146336, 0.011537126563224144],
        [2.9099380073034613, 0.005473331487229221],
        [2.915405829844622, -0.0006161742166145208],
        [2.9071666941646503, -0.006702786698380898],
        [2.885259187057375, -0.01275791552269669],
        [2.8497859270574537, -0.01875311649032628],
        [2.8009130995714355, -0.02466022384901572],
        [2.7388697032404283, -0.030451481338284896],
        [2.663946509905578, -0.03609967151235392],
        [2.5764947415139496, -0.04157824278496642],
        [2.476924468317543, -0.04686143363987942],
    ])

    assert_almost_equal(model.load_displacement_curve(('C', 'w')).T, [
        [0, 0.0],
        [-0.04666015874231988, 0.05],
        [-0.07044151792396791, 0.07457572868389645],
        [-0.08244673937861124, 0.08675183196942748],
        [-0.08395463461762454, 0.0882666736698646],
        [-0.08433160842737797, 0.08864538409497387],
        [-0.08452009533225446, 0.0888347393075285],
        [-0.08452598554803181, 0.08884065665792083],
        [-0.09138398851120222, 0.08863404473373751],
        [-0.11193141169082432, 0.08800790457126546],
        [-0.14606927753653354, 0.08696762488174754],
        [-0.1936363747827099, 0.08551811683135219],
        [-0.2544081076868201, 0.08366622461985325],
        [-0.32809758731457483, 0.08142069068369907],
        [-0.41435702500300753, 0.07879211321394712],
        [-0.5127794181415912, 0.07579289480246111],
        [-0.6229005181828584, 0.07243718248075155],
        [-0.7442010693560155, 0.06874079950491684],
        [-0.8761093052259965, 0.06472116928087278],
        [-1.0180036890673099, 0.06039723185862731],
        [-1.1692158830122472, 0.0557893534545017],
        [-1.3290339300849472, 0.05091922948575346],
        [-1.4967056325402883, 0.045809781623022044],
        [-1.6714421093793528, 0.04048504938262185],
        [-1.8524215154978478, 0.03497007679333613],
        [-2.038792904624057, 0.029290794681476277],
        [-2.2296802180007345, 0.023473899124125737],
        [-2.424186380641887, 0.017546726624241563],
        [-2.6213974869317287, 0.011537126563224144],
        [-2.8203870573112337, 0.005473331487229221],
        [-3.020220347801294, -0.0006161742166145208],
        [-3.2199586941266336, -0.006702786698380898],
        [-3.4186638722204377, -0.01275791552269669],
        [-3.6154024568987664, -0.01875311649032628],
        [-3.809250160492642, -0.02466022384901572],
        [-3.999296133214667, -0.030451481338284896],
        [-4.184647207020473, -0.03609967151235392],
        [-4.364432064711332, -0.04157824278496642],
        [-4.537805316024463, -0.04686143363987942],
    ])

    assert_almost_equal([m.det_k for m in model.get_model_history()], [
        0.004074788744173037,
        0.0014872416447633016,
        0.0004937740866387364,
        6.858889604245317e-05,
        1.865706342539482e-05,
        6.293318066989878e-06,
        1.2928525652688984e-07,
        -6.314925397443567e-08,
        -1.3566416639846965e-05,
        -5.4011048526361154e-05,
        -0.00012057262062571581,
        -0.000211998601789237,
        -0.00032656876061068,
        -0.0004621276016639495,
        -0.0006161250536889846,
        -0.0007856645845042086,
        -0.000967557822654059,
        -0.001158384645292901,
        -0.001354557590462187,
        -0.0015523893729356233,
        -0.0017481622275573455,
        -0.001938197773281803,
        -0.0021189260852401788,
        -0.0022869526809176878,
        -0.0024391221692924665,
        -0.002572577377481921,
        -0.0026848128566175837,
        -0.002773721775519058,
        -0.002837635335167833,
        -0.002875353976640805,
        -0.0028861698074960133,
        -0.00286987983388735,
        -0.0028267897550757416,
        -0.002757708250570247,
        -0.0026639318648953125,
        -0.002547220767943302,
        -0.0024097658370636206,
        -0.0022541476675442323,
        -0.0020832882681331346,
    ])
